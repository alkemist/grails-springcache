h1. Springcache Plugin

The Springcache plugin allows you to easily add the following functionality to your Grails project:
 # Caching of Spring bean methods (typically Grails service methods).
 # Caching of page fragments generated by Grails controllers.
 # Cache flushing when Spring bean methods or controller actions are invoked.

The plugin depends on the [EHCache|http://ehcache.org/] and EHCache-Web libraries.

h2. Upgrading from earlier plugin versions

Successive versions of the plugin have introduced some non-backwards compatible changes. If you are upgrading from an earlier version you will need to consider the following:

h3. Upgrading from 1.1.* to 1.2:
 * The plugin no longer uses caching and flushing models. Instead cache names are referenced directly by the annotations. This means you will need to 'inline' your model definitions from @Config.groovy@ to your annotations.
 * The plugin no longer supports alternate cache libraries, it's EHCache or nothing.

h3. From pre 1.1:
 * You will need to change the import statements for your @Cacheable@ and @CacheFlush@ annotations to point to the @grails.plugin.springcache.annotations@ package.
 * The default map cache is no more. Grails includes EHCache and it's very easy to configure so that is now the default.
 * If you were using a cache provider other than EHCache you will need to write some code to implement your own @grails.plugin.springcache.CacheProvider@ - see below.
 * Caching and flushing model configuration has changed slightly and is now simpler. It should be no more than a couple of minutes work to adapt your existing config. See the examples below.

h2. Basics

The Springcache plugin provides two annotations that are the basis of how you can apply caching and flushing behaviour to both Spring bean methods and page fragments. Both annotations are in the @grails.plugin.springcache.annotations@ package.

h3. The @Cachable annotation

The @Cacheable annotation is applied to methods on Spring managed beans such as Grails services to cache method results or to controller actions to cache page fragments. The annotation requires a single argument which is the name of the cache that will be used.

h3. The @CacheFlush annotation

The @CacheFlush annotation can be applied in the same places as the @Cacheable annotation but instead of caching results it will cause a cache or set of caches to be flushed. The @CacheFlush annotation can take a single argument or a String array. Either way the arguments can simply be literal cache names or regular expression patterns that may match multiple cache names. For example:
{code}
@CacheFlush("myCache")
@CacheFlush(/\w+ControllerCache/)
@CacheFlush(["cacheA", "cacheB", "cacheC"])
@CacheFlush([/cache[A-Z]/, "myCache"])

h2. Applying caching and flushing behaviour to Spring bean methods

The typical use case for method caching is when you have Grails service methods that invoke expensive operations such as HTTP gets, web service calls, filesystem IO, etc. Although you _can_ use the Springcache plugin to cache service methods that query or update GORM domain objects you should consider whether it's more appropriate to use the Hibernate 2nd level cache (see the relevant sections in the Grails documentation).

Simply add an @Cacheable annotation to methods that should cache their results and a @CacheFlush annotation to methods that should flush caches.

Be aware that the annotations will only have any effect on Spring-managed beans. If you create instances of your class directly rather than getting them from the application context they will not be decorated with caching/flushing behaviour.

A simple example might be:

h4. PiracyService.groovy
{code}
@Cacheable("pirateCache")
def getPirates() {
	// return a list of pirates
}

@Cacheable("pirateCache")
def findPirates(name) {
	// return a particular pirate
}

@Cacheable("shipCache")
def getShips() {
	// return a list of ships
}

@CacheFlush("pirateCache")
void registerNewPirate(Pirate sailor) {
	// store a new pirate
}

@CacheFlush("shipCache")
void registerNewShip(Ship ship) {
	// store a new ship
}

@CacheFlush(["pirateCache", "shipCache"])
void registerNewShipWithCrew(Ship ship, Collection&lt;Sailor&gt; crew) {
	// store a new ship and associated pirates
}
{code}

This ties the flushes on the register* methods to the particular caches they affect, so after calling @registerNewPirate@ the methods @getPirates@ and @findPirates@ will re-populate their cached results but @getShips@ would still use any cached results from previous calls. Calling @registerNewShipWithCrew@ will flush both caches.

It is fine for multiple methods to share the same caches. Both @getPirates@ and @findPirates@ in the example above share the same cache. Cache entries are keyed on target object (the service instance in this case), method name and call parameters so there should be no confusion when using the same caches on multiple methods.

There are various strategies you can adopt in naming and grouping caches, this example shouldn't be seen as definitive.

h2. Page fragment caching

The same annotations can be applied to controller actions and the plugin will then cache the page fragment output by the plugin whether this is done by rendering a GSP, using a @MarkupBuilder@ closure, rendering text directly or whatever. Only successful page renders are cached, so redirects, 404s, errors and so on will not be.

Composing pages so that they can be optimally cached requires some thought. The plugin uses a servlet filter that runs 'inside' the SiteMesh filter provided by Grails. This means that cached output is decorated by SiteMesh and the resulting page can therefore contain uncached content from the SiteMesh template. In addition you can use caching at a modular level to cache the output of controller actions invoked using the @g:include@ tag. Combining these techniques leads to powerful modular page caching. For example, you can cache the output of the 'main' controller then use @g:include@ tags in the SiteMesh layout to include content on the page that is cached separately - and can be flushed separately - from the main body of the page.

h3. Example: caching Grails CRUD pages

Grails' standard scaffolded CRUD pages provide a good example of how caching and flushing can be applied. For example, let's take an *Album* domain class. The scaffolded controller could be annotated like this:

h4. AlbumController.groovy
{code}
class AlbumController {
	// the index action is uncached as it just performs a redirect to list
    def index = {
        redirect(action: "list", params: params)
    }

	@Cacheable("albumControllerCache")
    def list = {
		// standard Grails scaffolding code omitted
    }

	@Cacheable("albumControllerCache")
    def create = {
		// standard Grails scaffolding code omitted
    }

	@CacheFlush(["albumControllerCache", "artistControllerCache", "latestControllerCache", "popularControllerCache"])
    def save = {
		// standard Grails scaffolding code omitted
    }

	@Cacheable("albumControllerCache")
    def show = {
		// standard Grails scaffolding code omitted
    }

	@Cacheable("albumControllerCache")
    def edit = {
		// standard Grails scaffolding code omitted
    }

	@CacheFlush(["albumControllerCache", "latestControllerCache", "popularControllerCache"])
    def update = {
		// standard Grails scaffolding code omitted
    }

	@CacheFlush(["albumControllerCache", "artistControllerCache", "latestControllerCache", "popularControllerCache"])
    def delete = {
		// standard Grails scaffolding code omitted
    }
}
{code}

The 'list', 'show', 'create' and 'edit' pages are all cached. The 'show' and 'edit' rely on an domain object id parameter and this will be included in the cache key so that @/album/show/1@ and @/album/show/2@ are cached separately. The 'save', 'update' and 'delete' actions are flushing caches. Note that in addition to flushing the cache used by the 'list', 'show', 'create' and 'edit' actions they are flushing other caches which are content caches for controllers whose output should be refreshed if @Album@ data changes.

h3. Example: decorating a cached page with dynamic content using SiteMesh

It is often necessary to have portions of a page be dynamic. A typical example is when something is displayed to logged in users that will be different for each user. Those sorts of page sections are not really candidates for caching. At the same time other parts of the page may well be able to take advantage of caching. For example, if you want to display a _"Welcome back $username"_ type message in page headers while caching the main body of the page you can use SiteMesh templates like this:

h4. grails-app/views/layouts/main.gsp
{code}
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;&lt;g:layoutTitle default="Welcome to My Grails Application"/&gt;&lt;/title&gt;
		&lt;%-- render the page head from the controller - may be cached --%&gt;
		&lt;g:layoutHead/&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;%-- render a "welcome back" header (tags used here are from the Spring Security plugin) --%&gt;
		&lt;g:isLoggedIn&gt;
			&lt;div id="loggedInUser"&gt;&lt;g:message code="auth.loggedInAs" args="[loggedInUsername()]" default="Logged in as {0}"/&gt;&lt;/div&gt;
		&lt;/g:isLoggedIn&gt;
		&lt;g:isNotLoggedIn&gt;
			&lt;div id="loginLink"&gt;&lt;g:link controller="login"&gt;&lt;g:message code="default.login.label" default="Login here"/&gt;&lt;/g:link&gt;&lt;/div&gt;
		&lt;/g:isNotLoggedIn&gt;
		
		&lt;%-- render the page body from the controller - may be cached --%&gt;
		&lt;g:layoutBody/&gt;
	&lt;/body&gt;
&lt;/html&gt;
{code}

If the controller action invoked uses @Cacheable everything will work fine because the content of the SiteMesh layout is _not_cached - only the content generated by the cached action. The SiteMesh template is applied to cached and uncached content alike so the correct username will be displayed to your users even though the main body of the page may have been loaded from a cache.

h3. Example: a modular page using multiple cached sections

h3. Customising key generation for page fragment caching

By default page fragment cache entries are keyed on controller name, action name and any request parameters (which can be from a query string or those added by Grails URL mappings, e.g. the "id" parameter on a standard 'show' or 'edit' action). If you need to use some kind of special key generation you can implement the interface @grails.plugin.springcache.web.key.KeyGenerator@ (or extend @grails.plugin.springcache.web.key.AbstractKeyGenerator@ or one of the existing implementations that the plugin provides) then simply override the Spring bean property on the filter in @Config.groovy@ like this:
{code}
beans {
	springcacheFilter.keyGenerator = new MyKeyGenerator()
}
{code}

h3. Page fragment caching and content negotiation

By default the key generator used by the page fragment caching filter does not take content negotiation into account. However, if you are caching controller actions that use Grails' [@withFormat@|http://grails.org/doc/latest/ref/Controllers/withFormat.html] dynamic method to render different content types you will want to cache results separately according to the output format. The plugin provides a key generator implementation that supports this, you just need to override the filter's key generator in @Config.groovy@ like this:
{code}
import grails.plugin.springcache.web.key.MimeTypeAwareKeyGenerator

beans {
	springcacheFilter.keyGenerator = new MimeTypeAwareKeyGenerator()
}
{code}

h3. Full page caching

The plugin only provides page fragment caching rather than full page caching. Full page caching is very simple to apply using the EHCache-Web library that the Springcache plugin uses. See my blog post [here|http://adhockery.blogspot.com/2010/02/full-page-caching-in-grails-with.html] for details.

h2. Programmatic caching and flushing

Both the servlet filter used for content caching and the AOP aspects used for service method caching use a Grails service to handle caching and flushing. Your app can access this service directly if you need to do any programmatic caching or flushing. The service is called _springcacheService_ and can be auto-injected into your Grails artefacts just like any other Spring bean. The service provides the following methods:

|_. Name |_. Parameters |_. Description |
| flush(patterns) | A String, regex pattern or Collection/array of them. | All caches matching the names/patterns are flushed. |
| flushAll(boolean) | Optional boolean, defaults to false. | Flushes all caches and optionally clears statistics. |
| doWithCache(String, Serializable, Closure) | Cache name, cache key and closure used when cache is missed. | Returns either cached value or the return value of the closure if no cache element exists for the key. If the latter, the value is cached and used on future calls with the same key. |
| doWithBlockingCache(String, Serializable, Closure) | As above. | A variant of doWithCache that ensures a BlockingCache is used and handles exceptions so that the cache's lock is relinquished correctly. |

The plugin encourages you to use declarative caching and flushing to maintain a good separation of concerns. Over-using the _springcacheService_ is likely to render your code harder to test and maintain. That said programmatic caching may be necessary in some places but there are some caveats:
 * If you try to perform caching or flushing in interceptors on controller actions bear in mind those actions, and therefore any interceptors, will not be invoked at all if they are annotated with @Cacheable and the cache is hit.
 * Controller actions don't _return_ HTML output so you can't do fine grained content caching by using @springcacheService.doWithCache@ in a controller action.

h2. Configuring caches

Caches referenced by the annotations can be configured, either in an @ehcache.xml@ (usually kept in the @grails-app/conf@ directory) file, using @EhCacheFactoryBean@ definitions in @grails-app/conf/spring/resources.groovy@ or via @Config.groovy@. If you do not configure caches individually they will be created on demand using defaults.

h3. Configuring caches with resources.groovy

You can configure caches in @grails-app/conf/spring/resources.groovy@ using Spring's [EhCacheFactoryBean|http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/cache/ehcache/EhCacheFactoryBean.html]. For example:

h4. grails-app/conf/spring/resources.groovy
{code}
pirateCache(EhCacheFactoryBean) { bean -&gt;
	cacheManager = ref("springcacheCacheManager")
	cacheName = "pirateCache"
	eternal = true
	diskPersistent = true
	memoryStoreEvictionPolicy = "LFU"
}
{code}

h3. Configuring caches with Config.groovy

With the Springcache plugin you can define caches in @Config.groovy@ in a similar way. For example:

h4. grails-app/conf/Config.groovy
{code}
springcache {
	caches {
		pirateCache {
			eternal = true
			diskPersistent = true
			memoryStoreEvictionPolicy = "LFU"
		}
	}
}
{code}
Under the hood this is simply setting up @EhCacheFactoryBean@ instances in the Spring context, so it is up to you whether you prefer to use @resources.groovy@ or @Config.groovy@ there is not much difference.

h2. Tips

h3. Tearing down caches in tests

In integration test and some types of functional test (e.g. Selenium RC tests when not running in remote mode) your tests can have Spring beans automatically injected. You can use this facility to tear down caches between tests. For example:
{code}
def springcacheService // auto-injected service bean from plugin

void tearDown() {
    super.tearDown()
	springcacheService.flushAll(true)
}
{code}
The boolean parameter tells the method to clear cache statistics as well as flushing. You only really need to do this if your tests are making assertions about hit/miss counts and so on.

h3. Disabling

Rather than tearing down caches between tests you may prefer to disable the plugin altogether. This is done by setting the config key @springcache.disabled = true@ which can be done on a per-environment basis. For example:
{code}
springcache {
	// cache definitions, etc
}

environments {
	test {
		springcache.disabled = true
	}
}
{code}

h3. Logging Output

To see logging from the plugin set the logging level on "grails.plugin.springcache" in your Config.groovy.

h2. FAQ

h3. My cache config doesn't seem to be working.
Ensure all your config for the Springcache plugin is nested inside a single 'springcache' block in Config.groovy otherwise only the last block will take effect.

h3. Can I programatically disable caching in specific circumstances such as when a user is logged in?
Not right now, although I hope to add this to a future release of the plugin. I'd encourage you to think about structuring your pages using SiteMesh layouts and the g:include tag such that it is possible to separate the dynamic and cacheable sections.

h3. Why isn't there a taglib so I can just wrap parts of my page that need caching?
It's something I may add but from a purist point of view I'm not very keen on the idea. Caching is a separate concern from view rendering and the two really shouldn't be mixed up. So far the plugin has deliberately taken a declarative approach to caching which encourages you to maintain a good separation of concerns.

h3. Can I use @Cacheable on taglib Closures?
Not yet. This is definitely on the roadmap for a future version of the plugin.

h2. Release Notes
h4. 1.2
 * Adds page fragment caching via annotations on controllers.
 * Simplifies config by getting rid of caching and flushing models and having annotations refer to cache names directly.
h4. 1.1.3
 * Fixes bug where an expired ehcache element whose key is still in the cache can cause the plugin to think the key still maps to a valid value.
 * Allows configuration of ehcache caches directly in Config.groovy
h4. 1.1.2
 * Automatically create ehcache caches if they are not explicitly configured in @ehcache.xml@
h4. 1.1.1
 * Fixes bug where plugin crashes if disabled
h4. 1.1
 * Complete rewrite to support Grails 1.2 and Spring 3.0.
 * Requires Grails 1.2+
h4. 1.0.1
 * Fixes bug where plugin causes crash if disabled when debug logging is switched on.
 * Fixes compatibility with Java 1.5.
h4. 1.0
 * Configure alternate caching providers via Config.groovy rather than having to override bean definitions in resources.groovy
 * Removed dependency on joda-time which was only there for testing
 * Better synchronization for getting caches from the mapcache CacheManager
h4. 0.2
 * Configure caching and flushing models via Config.groovy
 * Flag to disable plugin entirely for testing environments
h4. 0.1
 * Initial release

h2. Contact

The plugin code is hosted on [GitHub|http://github.com/robfletcher/grails-springcache]. Please feel free to fork the plugin and contribute patches.

Please raise defects or enhancements on [JIRA|http://jira.codehaus.org/browse/GRAILSPLUGINS/component/14010].

Questions, comments? [rob@energizedwork.com|mailto:rob@energizedwork.com].